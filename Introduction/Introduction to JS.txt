JavaScript Introduction :: ->
   JavaScript is a scripting , ligthweight , object-oriented programming language that allows you to implement complex features on web pages — every time a web page does more than just sit there and display static information for you to look at — displaying timely content updates, interactive maps, animated 2D/3D graphics, scrolling video jukeboxes, etc.

Interpreted V/S Compiled JavaScript::->
  JavaScript is a lightweight interpreted programming language. The web browser receives the JavaScript code in its original text form and runs the script from that. From a technical standpoint, most modern JavaScript interpreters actually use a technique called just-in-time compiling to improve performance; the JavaScript source code gets compiled into a faster, binary format while the script is being used, so that it can be run as quickly as possible. However, JavaScript is still considered an interpreted language, since the compilation is handled at run time, rather than ahead of time.

Adding JavaScript to your page::->
  1)Internal JavaScript
  2)External JavaScript
  3)Inline JavaScript handlers

Script Loading Strategies::->
  A common problem is that all the HTML on a page is loaded in the order in which it appears. If you are using JavaScript to manipulate elements on the page (or more accurately, the Document Object Model), your code won't work if the JavaScript is loaded and parsed before the HTML you are trying to do something to.

Solution to blocking of script problem while parsing::->
  async and defer both instruct the browser to download the script(s) in a separate thread, while the rest of the page (the DOM, etc.) is downloading, so the page loading is not blocked during the fetch process.

  scripts with an async attribute will execute as soon as the download is complete. This blocks the page and does not guarantee any specific execution order.

  scripts with a defer attribute will load in the order they are in and will only execute once everything has finished loading.

  If your scripts should be run immediately and they don't have any dependencies, then use async.

  If your scripts need to wait for parsing and depend on other scripts and/or the DOM being in place, load them using defer and put their corresponding <script> elements in the order you want the browser to execute them.

Why JavaScript was born ?
  To create interactive websites.
    -Client side validation
    -Popup 
    -Event onClick 
    -Inshort for making a website in which instead of just looking at the site user have say in its working 

Where is JavaScript now ?//Capability of JavaScript
  -Website Client Side(JavaScript,JQuery,React JS)
  -Website Server Side(Node JS,Express JS)
  -Mobile Development(React Native,Phone Gap,Ionic...)
  -Software Development(ElectornJS --e.g. VS Code)
Simply saying,its incorporates everything now,its capabilities has reached as such it can even create powerful text editors like VS Code.

What is ES6,ES7,ES8 and so on...?
What is ECMAScript ? 
 --There we go let's introduce some more guests:->
   1)ECMA International
    --Organization that creates standard for technologies 
   2)ECMA-262 
    --This is a standard published by ECMA International.It contains the specification 
      of general purpose scripting language.
   3)ECMAScript
    --The specification defined in ECMA-262 for creating a general purpose scripting language.
    --It provides the rules ,details, and guidelines that a scripting language must observe to be considered ECMAScript compliant.
   4)ES6(ES2015)
    --It is the sixth edition of the ECMA-262 standard,and feature major changes and improvements to the ECMAScript specification.

JavaScript Engine::->
  A JavaScript engine is a software component that executes JavaScript code. The first JavaScript engines were mere interpreters, but all relevant modern engines use just-in-time compilation for improved performance.[1]

  JavaScript engines are typically developed by web browser vendors, and every major browser has one. In a browser, the JavaScript engine runs in concert with the rendering engine via the Document Object Model.
   e.g-V8 in Chrome 
      -SpiderMonkey in FireFox 
      -Chakra in Edge 

  It is the factor which decides which browser is loading faster and which is compatiable to the latest version of JavaScript.